#!/usr/bin/env bash
set -euo pipefail

# Setup script to install Python, dependencies, and MongoDB; create DB/user; and generate .env
# Supported: Ubuntu/Debian (apt) and macOS (Homebrew)

# Configurable via environment variables prior to running this script
APP_DIR="$(cd "$(dirname "$0")" && pwd)"
PY_VERSION_DEFAULT="3"

# Defaults (can be overridden via env)
MONGO_HOST=${MONGO_HOST:-"localhost:27017"}
MONGO_DB=${MONGO_DB:-"simple_graphql_db"}
MONGO_USERNAME=${MONGO_USERNAME:-"app_user"}
MONGO_PASSWORD=${MONGO_PASSWORD:-"app_pass"}
API_SECRET=${API_SECRET:-"change-me-secret"}
APP_PORT=${APP_PORT:-"8000"}
APP_HOST=${APP_HOST:-"0.0.0.0"}

info() { echo "[INFO] $*"; }
err() { echo "[ERROR] $*" >&2; }

OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

install_python_linux() {
  info "Installing Python and tools via apt..."
  sudo apt-get update -y
  sudo apt-get install -y python3 python3-venv python3-pip
}

install_python_macos() {
  if ! command -v brew >/dev/null 2>&1; then
    err "Homebrew is required on macOS. Install from https://brew.sh and re-run."
    exit 1
  fi
  info "Installing Python via Homebrew..."
  brew update
  brew install python
}

install_mongodb_linux() {
  info "Installing MongoDB Community via apt..."
  if ! grep -q mongodb /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
    curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg
    echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME)/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
  fi
  sudo apt-get update -y
  sudo apt-get install -y mongodb-org
  sudo systemctl enable mongod || true
  sudo systemctl start mongod || true
}

install_mongodb_macos() {
  info "Installing MongoDB Community via Homebrew..."
  brew tap mongodb/brew
  brew install mongodb-community@7.0
  brew services start mongodb-community@7.0 || true
}

wait_for_mongo() {
  info "Waiting for MongoDB to be available at ${MONGO_HOST}..."
  host="${MONGO_HOST%%:*}"
  port="${MONGO_HOST##*:}"
  for i in {1..30}; do
    (echo > /dev/tcp/$host/$port) >/dev/null 2>&1 && { info "MongoDB is up"; return 0; }
    sleep 1
  done
  err "Timed out waiting for MongoDB at $MONGO_HOST"
  exit 1
}

create_db_user() {
  info "Creating MongoDB user '${MONGO_USERNAME}' for DB '${MONGO_DB}' (if not exists)..."
  mongosh <<EOF
use ${MONGO_DB}
try {
  db.createUser({user: "${MONGO_USERNAME}", pwd: "${MONGO_PASSWORD}", roles: [{role: "readWrite", db: "${MONGO_DB}"}]})
  print("User created")
} catch(e) {
  if (e.codeName === 'DuplicateKey') { print('User already exists'); } else { throw e; }
}
EOF
}

create_venv_and_install() {
  info "Creating virtual environment and installing requirements..."
  python3 -m venv .venv
  # shellcheck disable=SC1091
  source .venv/bin/activate
  python -m pip install --upgrade pip
  pip install -r requirements.txt
}

write_env_file() {
  info "Writing .env file..."
  cat > .env <<ENV
# Generated by setup.sh
MONGO_HOST=${MONGO_HOST}
MONGO_DB=${MONGO_DB}
MONGO_USERNAME=${MONGO_USERNAME}
MONGO_PASSWORD=${MONGO_PASSWORD}
API_SECRET=${API_SECRET}
APP_PORT=${APP_PORT}
APP_HOST=${APP_HOST}
ENV
  info ".env written with Mongo and app settings."
}

main() {
  cd "$APP_DIR"
  info "Starting setup in $APP_DIR"

  case "$OS" in
    linux*) install_python_linux; install_mongodb_linux ;;
    darwin*) install_python_macos; install_mongodb_macos ;;
    *) err "Unsupported OS: $OS"; exit 1 ;;
  esac

  wait_for_mongo
  create_db_user
  create_venv_and_install
  write_env_file

  info "Setup completed. To run the app:"
  echo "1) source .venv/bin/activate"
  echo "2) python app.py  (or: uvicorn app:app --host \"$APP_HOST\" --port \"$APP_PORT\")"
  echo "Remember to use header: X-API-SECRET: $API_SECRET"
}

main "$@"
